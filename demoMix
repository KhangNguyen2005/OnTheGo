import os
from dotenv import load_dotenv
import serpapi
import requests
import urllib.parse
import json

load_dotenv()

# Load the SerpAPI key for Google Maps queries.
serp_api_key = os.getenv('SERPAPI_KEY')
client = serpapi.Client(api_key=serp_api_key)

# Azure Maps Subscription Key (replace with your actual key if not using environment variables)
SUBSCRIPTION_KEY = '9FeaTsMg7fH5DgcchS5AtICBBNTWnuoBHNG4H0a3OLzkxTeY9lHnJQQJ99BCACYeBjF6fAFpAAAgAZMP2bXk'

def get_coordinates(destination):
    address_url = "https://atlas.microsoft.com/search/address/json"
    params = {"subscription-key": SUBSCRIPTION_KEY, "api-version": "1.0", "query": destination}
    response = requests.get(address_url, params=params)
    if response.status_code == 200:
        data = response.json()
        if data.get("results"):
            position = data["results"][0]["position"]
            return position["lat"], position["lon"]
        else:
            raise Exception("No matching address found.")
    else:
        raise Exception(f"Address API error: {response.status_code}")

def generate_ll_param(lat, lon, zoom=25):
    return f"@{lat},{lon},{zoom}z"

def main():
    destination = input("Enter destination (address or location): ")
    amenity = input("Enter type of amenity (e.g. restaurant, cafe, hotel): ") or "restaurant"
    try:
        lat, lon = get_coordinates(destination)
        print(f"\nCoordinates for '{destination}': {lat}, {lon}")
        ll_param = generate_ll_param(lat, lon)
        print(f"Formatted ll parameter: {ll_param}\n")
        
        params = {'engine': 'google_maps', 'q': amenity, 'type': 'search', 'll': ll_param}
        results = client.search(params)
        
        if "places_results" in results:
            locations = results["places_results"][:5]
        elif "local_results" in results:
            locations = results["local_results"][:5]
        elif "results" in results:
            locations = results["results"][:5]
        else:
            locations = []
        
        reduced_locations = []
        for loc in locations:
            reduced_locations.append({
                "Name": loc.get("title"),
                "Address": loc.get("address"),
                "Rating": loc.get("rating"),
                "Price": loc.get("price"),
                "Opening Hour": loc.get("hours", loc.get("open_state"))
            })
        
        print("Search Results from SerpAPI (limited to 5 locations):")
        print(json.dumps(reduced_locations, indent=4))
    except Exception as e:
        print("Error:", e)

if __name__ == "__main__":
    main()
